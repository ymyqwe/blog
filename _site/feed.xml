<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>鱼头的博客</title>
    <description>鱼头的小博客。随便写的，随便看看吧。</description>
    <link>/blog/</link>
    <atom:link href="/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 16 Mar 2016 18:10:21 +0800</pubDate>
    <lastBuildDate>Wed, 16 Mar 2016 18:10:21 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>ANGULAR VS. EMBER VS. REACT: 选择一个前端框架</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;目录&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;ANGULAR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;EMBER&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;REACT&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;作为前端工程师，我们活在一个令人兴奋的时代。最大的三个框架都接近或已经有重大的更新。Ember不久前发布了可以轻易从老版本更新的2.0版本。React发布了0.14，而Angular 2.x也即将要大放异彩。&lt;/p&gt;

&lt;p&gt;当然，现在还有许多其他客户端的框架，也有一些在诸如Backbone和Knockout之类的正在衰败的库，也有一些新奇的、有趣的像Aurelia一样的新晋者，但是如今你决定要做一个web app， Angular、Ember、React是确保长效支持和活跃社区的最安全的选择。那么哪一个选择是最优的呢？让我们来分析下这些新的重要的更新带来的改变以及他们提供的优势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/angular2.png&quot; alt=&quot;&quot; style=&quot;margin:auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;angular-20-&quot;&gt;ANGULAR 2.0 (与之前有令人吃惊的变化)&lt;/h2&gt;

&lt;p&gt;Angular是三个框架中最流行的。它是最初发布的，代表了客户端MVC框架从前一代的巨大提升。Angular采用了一种务实的途径，与用户之间产生了共鸣。&lt;/p&gt;

&lt;p&gt;但是这些都被Angular 2.0的出现危害了，Angular 2.0有点失败。不同于Ember的方法，Angular的第二版本完全重建了这个框架。这意味着对每一段代码会产生巨大的变化。这意味着从1.x版本重构代码会很难，同时从老版本升级的路径会很难。&lt;/p&gt;

&lt;p&gt;随后一个相关的软件工程奇迹诞生了，Angular团队发明了允许项目同时使用Angular 1.x和2.0的方法，使升级成为了一个渐进的过程。在我看来，这将Angular从特定的阻塞、对于挑战的恐惧和遗留的代码基础。&lt;/p&gt;

&lt;p&gt;已经避开了中途死亡，许多现在创造出来的项目仍然使用1.x版本，并且在1.x被淘汰之后，计划逐渐接纳2.0版本。如果你愿意承担巨大的风险，并且不准备立即发布，尽管去使用新版本吧。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;在2.0版本中你应该期待什么？&lt;/h3&gt;

&lt;p&gt;你可以期待许多。这个框架到目前为止正在经历最大的版本变化。&lt;/p&gt;

&lt;p&gt;Angular 2.0的开发侧重于移除该框架的不必要的复杂性。他们去除并且取代了directives、controllers、modules、scopes和几乎所有其他的1.x版本的概念。它充分保留了ES2015和ES2016的特性，并且将这个框架设计成更容易学习。&lt;/p&gt;

&lt;p&gt;除了让框架更轻便，2.0版本还有一些其他的显著的目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;性能提升&lt;/li&gt;
  &lt;li&gt;原生app支持&lt;/li&gt;
  &lt;li&gt;服务器端渲染&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些改变对于Angular来说是巨大的，使用1.x版本来构建他们会十分困难。我们来详细看看这些改变以及他们对于这个框架的意义。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;性能&lt;/h4&gt;

&lt;p&gt;提升性能是所有人希望的Angular的下一版本中的重要项目之一，如果你已经对Angular足够熟悉，那么你可以开始让一个app缓慢开启。总有一种方法是可以弥补性能问题的，但这个框架并不会让你避免搬石砸脚。&lt;/p&gt;

&lt;p&gt;Angular在脏监测中阻碍了自己的性能。在每个监测循环中，这个框架检测了你的app中成百上千个值的改变。Angular的新模型接受了React推广的一个实践，单向数据传输和不可变的数据。通过接受这些，Angular现在只在数据改变之后更新。检测改变只会快速检测一个对象而不是所有变量。&lt;/p&gt;

&lt;h4 id=&quot;app&quot;&gt;原生app&lt;/h4&gt;

&lt;p&gt;使用Angular创建原生app对于2.0来说是它发展历程上一个重要的提升。Angular团队和React团队曾经对于这个问题进行过讨论。尽管他们构建2.0的原生app时背后的渲染仍然使用React的原生渲染，允许了他肩负了这项技术。这将引领一个混合app的新时代，它看起来像是原生的，但是却有跨平台的共通逻辑。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;服务器端渲染&lt;/h4&gt;

&lt;p&gt;Angular在服务器端的渲染是另一项被期待的功能。服务器端渲染加速了第一次页面的加载次数，并且通过使动态页面易于加载提升了SEO。看到页面渲染加速将很大提升下一代使用Angular构建的web app的体验。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/angular2-str-weak.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;angular&quot;&gt;谁应该使用Angular？&lt;/h4&gt;

&lt;p&gt;Angular很可能会以很长时间作为最流行的客户端框架，这使得任何人开始一个新项目时它会成为一个安全的选择。2.0代表了Angular从最初版本的一个巨大的改变。事实上，这样巨大的改变就如同Ember与SroutCore有巨大差异一样。&lt;/p&gt;

&lt;p&gt;Angular 2.0是通过Typescript写的，这是一种微软添加了检查和其他增强的Javascript编程语言。事实上，最近关于它的社区中有一个民意投票，大部分开发者愿意使用Typescript。这以及一些其他的特性让我们有理由相信Angular仍将是大型企业愿意选择的框架。尽管如今开始使用2.0会有风险，但它的时代即将来临。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/ember 2.0.png&quot; alt=&quot;&quot; style=&quot;margin:auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ember-20&quot;&gt;EMBER 2.0&lt;/h2&gt;

&lt;p&gt;Ember把它自己定位为一个为了具有前景的项目定制的框架。Ember在工业界中由两位传奇的软件工程师引领，Yehuda Katz和Tom Dale。与其他在这里被讨论的框架不同，Ember并非由一个特大企业构建，尽管它有一个令人惊奇的、富有激情的、活跃的社区围绕着它。&lt;/p&gt;

&lt;p&gt;在1.0版本之前，Ember由于它的多变的API变得繁荣。随后，Ember团队证明了可以在稍稍改变用户界面的情况下作出很大的潜在变化。他们采用了Glimmer这个高速渲染引擎来使用这种方法。2.0他们移除了不能使用这个引擎的不利部分，因此使用Ember 2.x的app将会很快腾飞。&lt;/p&gt;

&lt;h3 id=&quot;x&quot;&gt;2.x版本将会带来什么？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;更加兼容诸如modules、classes、decorators之类的ES2015特性；&lt;/li&gt;
  &lt;li&gt;弃用Mustache，启用部件的支架语法；&lt;/li&gt;
  &lt;li&gt;布局结构变为pods，而非通过功能分组的controllers、models、components等等，顶部结构将是特性分类的；&lt;/li&gt;
  &lt;li&gt;由于路由部件，Controllers将被删除；&lt;/li&gt;
  &lt;li&gt;服务器端渲染器的提升将帮助降低页面加载次数并帮助提升搜索引擎优化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/ember-2-str-weak.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ember&quot;&gt;谁应使用Ember？&lt;/h3&gt;

&lt;p&gt;Ember对于创建web app是一个方便的选择。如之前提到的一样，许多有雄心的app使用这个框架来搭建。特别是Ruby社区，对于Ruby商店来说，Ember是一个很棒的选择。许多文档、文章和博客都是通过这两种技术的结合来搭建的，&lt;a href=&quot;http://smashingboxes.com/blog/merging-rails-and-ember-cli&quot;&gt;这里是如何结合Rails和Ember的实例&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Ember对于那些那些包括所有工具的网站是一个最佳选择。我们通常会浪费很多时间在发现、搜索和整合库上。Ember简化了这些流程，给你提供了惊人的价值。各种方法总有优势、劣势，但是那些希望所有东西都变得很好的人会喜欢Ember的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/React 1.0.png&quot; alt=&quot;&quot; style=&quot;margin:auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;react-10&quot;&gt;REACT 1.0&lt;/h2&gt;

&lt;p&gt;React是这里比较的三个框架中最轻的一个。实际上，它甚至不能被认为是一个框架。它做一件事做得特别好：渲染UI部件。许多人甚至会搭配使用之前提到的框架，但是更通常的方法是搭配使用Flux。&lt;/p&gt;

&lt;p&gt;Flux在MVC层面上是一种不同的方案。与React其他生态系统一样，它仍然是一个只控制一种东西的库。这种情况下，它从模型界面上的改变呈现为视图界面上的改变。它仍然不包括其他特定的框架，比如与服务器交互、验证模型或者是依赖注入。如果你需要这些功能，会有其他的库来弥补它们。&lt;/p&gt;

&lt;p&gt;Facebook为了保持它们页面的UI一致，创造了React。由于它在服务器端的渲染和优越的性能，它的出现引起了轩然大波。看到Angular和React在它们的新版本上不断竞争是很有趣的。&lt;/p&gt;

&lt;p&gt;React仍然在不断创新，最引人注意的是React Native。Facebook在移动端平台上有很快速的原生app。之前它们就开源了React Native的Andriod平台。这对于想要做原生app的人来说是一个不错的选择。&lt;/p&gt;

&lt;h3 id=&quot;react-10-1&quot;&gt;React 1.0的发布的主要目标是什么？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;项目网站修改&lt;/li&gt;
  &lt;li&gt;文档改进&lt;/li&gt;
  &lt;li&gt;动画操作控制优化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/react-str-weak.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;react&quot;&gt;谁应使用React？&lt;/h3&gt;

&lt;p&gt;React对新和的已存的项目是很棒的选择。使用React分解你的UI并且重新构造它是很容易的。因此如果你要逐渐现代化现存的代码，React将是一个合适的选择。许多构建web app时的挑战性部分在React和Flux面前变得琐碎。&lt;/p&gt;

&lt;p&gt;React在过去几年中成为了客户端MVC发展的领导力量，其他框架都成为了React可以做的事情的追赶者。React基本都是通过ES2015规范写成的，领先于许多浏览器支持。如果你想走在前端或利用简单框架，React是你的正确选择。&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Mar 2016 00:00:00 +0800</pubDate>
        <link>/blog/2016/03/15/CHOOSING-A-FRONT-END-FRAMEWORK-ANGULAR-VS-EMBER-VS-REACT.html</link>
        <guid isPermaLink="true">/blog/2016/03/15/CHOOSING-A-FRONT-END-FRAMEWORK-ANGULAR-VS-EMBER-VS-REACT.html</guid>
        
        <category>前端</category>
        
        <category>技术</category>
        
        <category>翻译</category>
        
        
      </item>
    
      <item>
        <title>Front-End Development Notes</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;一些小笔记&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;目录&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;undefined is not a function &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot;&gt;transition in safari and firefox is ignored in inline elements.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot;&gt;Cannot read property ‘getElementsByTagName’ of null&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot;&gt;ruby rails unable to load fontawesome &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;undefined-is-not-a-function&quot;&gt;Undefined is not a function&lt;/h2&gt;
&lt;p&gt;Sometimes when you use $(document).ready(function() {})
An error occurs.
It is a collision of jQuery library.
TURN
  $(document).ready(function() { })
into
jQuery(function($)) {  }&lt;/p&gt;

&lt;h2 id=&quot;css3-transition-in-safari-and-firefox-is-ignored-in-inline-elements&quot;&gt;CSS3 transition in safari and firefox is ignored in inline elements.&lt;/h2&gt;
&lt;p&gt;Display it in block or inline-block element.&lt;/p&gt;

&lt;h2 id=&quot;cannot-read-property-getelementsbytagname-of-null&quot;&gt;Cannot read property ‘getElementsByTagName’ of null&lt;/h2&gt;
&lt;p&gt;Document.body won’t get a value assigned to it until the body element has been created.&lt;/p&gt;

&lt;h2 id=&quot;ruby-rails-unable-to-load-fontawesome&quot;&gt;ruby rails unable to load fontawesome&lt;/h2&gt;
&lt;p&gt;Ruby rails loads fontawesome path needs to add ‘config.assets.paths « Rails.root.join(‘app’,’assets’) ‘ to the application.rb.
Change  font-awesome.min.css to font awesome.min.css.scss.rb
Change the url in the fontawesomw.css.scss.erb to ‘&amp;lt;%= asset_path(“font/fontawesome-webfont.eot”) + “?v=3.2.1” %&amp;gt;’
Besides, you need to restart rails server.
&lt;!-- ##郁闷的感情历程 --&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 +0800</pubDate>
        <link>/blog/2016/01/30/Small-notes.html</link>
        <guid isPermaLink="true">/blog/2016/01/30/Small-notes.html</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>关于这个博客</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;目录&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot;&gt;技术实现&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot;&gt;Jekyll配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-pages&quot;&gt;Github-Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;学习前端怎么说也有半年多了，其实全心全意学习一样东西，半年的时间已经不短了，架设这个博客，也是为了记录自己的生活、学习细节。&lt;/p&gt;

&lt;p&gt;大家随意看看吧。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;技术实现&lt;/h2&gt;

&lt;h4 id=&quot;github-pageshttpspagesgithubcom&quot;&gt;为什么使用&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github-Pages&lt;/a&gt;？&lt;/h4&gt;

&lt;p&gt;通常我们在github上放置的代码，只是代码而已。但如果你放置的是&lt;b&gt;HTML&lt;/b&gt;代码，那么你可以直接像其他网站一样浏览它的展示，所以你不需要额外购买服务器。&lt;/p&gt;

&lt;p&gt;而&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;可以输出静态的&lt;b&gt;HTML&lt;/b&gt;文件，使用git可以轻松将markdown转化为post，而且看到了&lt;a href=&quot;huangxuan.me&quot;&gt;Hux Blog&lt;/a&gt;这样的开源博客，于是就拿来主义了一下，同时自己修修改改，完成了搭建。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll配置&lt;/h2&gt;

&lt;h4 id=&quot;jekyll-1&quot;&gt;安装Jekyll&lt;/h4&gt;
&lt;p&gt;在terminal中，安装Jekyll，运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;jekyll就安装成功了，然后主题fork的是&lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog&quot;&gt;Clean-Blog&lt;/a&gt;，这是一个相当简洁干净的博客主题，修修改改加上tags，基本就只剩下内容填充了。&lt;/p&gt;

&lt;p&gt;在terminal中，cd到你的jekyll文档下，运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加上了 –watch后，我们会强制jekyll在每次保存后更新站点。&lt;/p&gt;

&lt;h4 id=&quot;configyml&quot;&gt;更新&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site settings
title: 鱼头的博客
header-img: img/home-bg2.jpg
email: ymyymy_2@hotmail.com
description: &quot;鱼头的小博客。随便写的，随便看看吧。&quot;
baseurl: &quot;/blog&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将其中的各项内容替换成你自己的就好了！&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;在本地查看你的网站&lt;/h4&gt;

&lt;p&gt;在浏览器中输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000/blog&lt;/code&gt;以查看你的网站。&lt;/p&gt;

&lt;h4 id=&quot;includes&quot;&gt;设置&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;文件&lt;/h4&gt;

&lt;p&gt;该主题中，默认的页面会加载&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;文件夹中的页面，比如header、footer，所以想要更新页面的header和footer只需要在_includes文件夹中更新header.html和footer.html。在需要引用的页面添加代码即可。本博客中另外添加了网易云音乐的播放，为music.html，同样只需要引用即可。&lt;/p&gt;

&lt;h4 id=&quot;markdown&quot;&gt;利用markdown写作&lt;/h4&gt;

&lt;p&gt;该静态博客使用markdown写作，对markdown不熟悉的同学可以参考[markdown中文文档]（http://www.appinn.com/markdown/），多加练习就会习惯。&lt;/p&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;Github-Pages设置&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github-Pages&lt;/a&gt;文档比较简易，不过也很具有参考价值。&lt;/p&gt;

&lt;p&gt;Github-Pages的默认域名是 &lt;b&gt;your-username.github.io/your-project-name&lt;/b&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;设置你的存放目录&lt;/h4&gt;

&lt;p&gt;首先创建一个&lt;a href=&quot;https://github.com/new&quot;&gt;github repository&lt;/a&gt;，再clone到你的电脑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/repository.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;gh-pages&quot;&gt;创建gh-pages分支&lt;/h4&gt;

&lt;p&gt;在terminal中cd到你的项目目录下，创建gh-pages分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后把你下载的主题文件都复制到你clone过来的目录下面。&lt;/p&gt;

&lt;h4 id=&quot;gh-pages-1&quot;&gt;让gh-pages成为你的默认分支（可选）&lt;/h4&gt;

&lt;p&gt;首先，前往项目的分支设置，将gh-pages设置成为默认分支。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/branch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你只想要一个分支，你也可以&lt;a href=&quot;http://oli.jp/2011/github-pages-workflow/#deleting-master&quot;&gt;删除master分支&lt;/a&gt;，按照上面的教程来就可以了。一切搞定之后，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;your-message&quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就大功告成了，去&lt;b&gt;your-username.github.io/your-project-name&lt;/b&gt;查看你的网站吧！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一次写博客，肯定会有不好的地方，欢迎大家拍砖哈。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 +0800</pubDate>
        <link>/blog/2016/01/07/Something-about-this-blog.html</link>
        <guid isPermaLink="true">/blog/2016/01/07/Something-about-this-blog.html</guid>
        
        <category>博客</category>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>Megalomania</title>
        <description>&lt;p&gt;人生有很多痛苦，你可以选择你面对痛苦的姿态，以及痛苦的程度。 ­&lt;/p&gt;

&lt;p&gt;It reveals a universal desire: to be noticed and unique, political and dangerous ­&lt;/p&gt;

&lt;p&gt;我孤傲，我冷漠，我忧郁。 ­&lt;/p&gt;

&lt;p&gt;我就是一个变态的自大狂。 ­&lt;/p&gt;

&lt;p&gt;真是贴切啊，脱不去你的伪装，你就要一辈子背着它走，如《DARKKNIGHT》中的小丑，因受伤太深而变态。 ­&lt;/p&gt;

&lt;p&gt;我叫俞明远，我不高，我不英俊，我不白，我不开朗，我不悲观！ ­&lt;/p&gt;

&lt;p&gt;从初中开始，我就不知道与如何与别人打交道，自从去了实验班后就与初中几乎所有同学断了联系，有的只是在QQ好友名单里看看TA的头像、资料，不曾发送信息。心底里有一种懦弱的不屈感，如果我找TA，就会让这种感觉占据内心，说到底，我的心只是像温室的花朵那样徒有虚表却脆弱。 ­&lt;/p&gt;

&lt;p&gt;进了实验班后认识了小X熊，这头熊对我的影响还真是大，我从不苟言笑变成了可以说些笑话，跟着别人一起笑，也可以玩玩无厘头，即使是这样，我觉得有些人还是太难打交道，聊天也不知道从何聊起，在一起的只是尴尬。 ­&lt;/p&gt;

&lt;p&gt;我觉得我一直是爱着《挪威的森林》里渡边和直子的感觉，直子在前面走，渡边在后面低头跟着，两人默默无语，这感觉，真的是大爱。 ­&lt;/p&gt;

&lt;p&gt;爱上Invincible的MV很久了，在世俗喧嚣下静静行舟，在旋转高楼包围下保持一种独立的姿态。作一个世俗的观望者，绝不投入，绝不卷入这股恶流，永远保持心灵的纯净，如此甚好。 ­&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/40111334&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;疯狂地爱上这种感觉，犹如慢性毒药在血液里缓缓流淌，刺痛着神经，欲罢不能。得不到，却割舍不掉，这是一种近乎变态的心理，也是最真实、最能给人痛苦的方式。爱上海岛、森林，远离这个喧嚣的世俗，我想去成都，因为那边有很多山，很多安静的地方，但是，我最终还是抛弃了成都，一步三回头地走向上海，对不起啊，成都，我背叛了你。 ­&lt;/p&gt;

&lt;p&gt;最近喜欢上了Necromancer，他有个技能叫施虐之心，陶醉于散播死亡和痛苦，杀死一个单位能恢复一些魔法值。将死亡作为自己的乐趣，精神寄托。死灵法师的真谛，也许是复活，也许是折磨，也许是杀戮。谁能下定论呢？当一个人真正爱上了痛苦，他就是可怕的狂魔了。 ­&lt;/p&gt;

&lt;p&gt;我说我是个善于倾听的人，也许是假的，我听见别人滔滔不绝时，常常会产生厌恶感，我极力掩饰，眼睛却往往会泄密，透露出一种鄙夷的目光，眼睛不会撒谎，也许就是这么一种情况。我喜欢沉默，却不是尴尬的沉默，一种适度的、默契的、不言而喻的沉默，双方不需要目光交流，手势传递，内心既可达成共识的沉默。 ­&lt;/p&gt;

&lt;p&gt;我是个骄傲的人，纵使我从实力上不如许多人，但我一直看不起他们，他们凭什么比我强，我是如此独一无二，狂妄的危险的自大狂，说的真的就是我这么一个人。 ­&lt;/p&gt;

&lt;p&gt;曾经有很多人欣赏我，他们通过各种方式表达，我从来装作没发生过，这也算是一种彻底的伤害，我默默享受这种感觉，也承受着一次次失去别人的痛苦，矛盾的世界，光明的烟雾，浑浊的阳光，否定的存在， ­&lt;/p&gt;

&lt;p&gt;我这种人也是一个矛盾的集合体，种种的对立面，汇集起来，编织成这样一个灵魂，不闪光，却有特点，不亲近人，却有吸引力，不谦逊，却会低头，不服输，却骄傲，不外向，却会偶尔泄密，不犹豫，却懦弱，不可怕，却危险。 ­&lt;/p&gt;

&lt;p&gt;食之无味，弃之不舍。&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Aug 2009 00:00:00 +0800</pubDate>
        <link>/blog/2009/08/01/Megalomania.html</link>
        <guid isPermaLink="true">/blog/2009/08/01/Megalomania.html</guid>
        
        <category>Doom-holiday</category>
        
        
      </item>
    
  </channel>
</rss>
